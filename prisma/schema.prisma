generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  surname               String?
  username              String?
  email                 String          @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  city                  String?
  role                  Role?           @default(USER)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  clinicId              String?
  accounts              Account[]
  Appointment           Appointment[]
  Authenticator         Authenticator[]
  BlogPost              BlogPost[]
  Comment               Comment[]
  Like                  Like[]
  sentNotifications     Notification[]  @relation("NotificationSender")
  receivedNotifications Notification[]  @relation("NotificationUser")
  Pet                   Pet[]
  sessions              Session[]
  clinic                Clinic?         @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String            @id @default(cuid())
  userId    String
  clinicId  String
  petId     String
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String?
  time      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  clinic    Clinic            @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet       Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id          String        @id @default(cuid())
  name        String
  species     Species
  breed       String?
  age         Int?
  gender      Gender?
  image       String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Allergy     Allergy[]
  Appointment Appointment[]
  Disease     Disease[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vaccination Vaccination[]
}

model Disease {
  id          String   @id @default(cuid())
  petId       String
  name        String?
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Vaccination {
  id          String    @id @default(cuid())
  petId       String
  name        String
  date        DateTime
  nextDoseDue DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clinicId    String?
  clinic      Clinic?   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet         Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Allergy {
  id              String   @id @default(cuid())
  petId           String
  name            String
  symptoms        String
  recommendations String?
  dateDetected    DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clinicId        String?
  clinic          Clinic?  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet             Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Clinic {
  id           String         @id @default(cuid())
  name         String
  address      String
  city         String
  description  String
  phone        String?
  website      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Allergy      Allergy[]
  Appointment  Appointment[]
  Notification Notification[]
  User         User[]
  BlogPost     BlogPost[]
  Vaccination  Vaccination[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  senderId  String?
  clinicId  String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clinic    Clinic?  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  sender    User?    @relation("NotificationSender", fields: [senderId], references: [id])
  user      User     @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  content     String
  userId      String
  clinicId    String
  categoryId  String?
  imageId     String?
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clinic      Clinic    @relation(fields: [clinicId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Species {
  CAT
  DOG
  BIRD
  REPTILE
  OTHER
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
  VETERINARIAN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}
