datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  surname               String?
  username              String?
  email                 String          @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  city                  String?
  role                  Role?           @default(USER)
  accounts              Account[]
  sessions              Session[]
  // Optional for WebAuthn support
  Authenticator         Authenticator[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  Pet                   Pet[]
  Appointment           Appointment[]
  clinicId              String?
  sentNotifications     Notification[]  @relation("NotificationSender")
  receivedNotifications Notification[]  @relation("NotificationUser")
  clinic                Clinic?         @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Appointment {
  id       String            @id @default(cuid())
  userId   String
  clinicId String
  petId    String
  date     DateTime
  status   AppointmentStatus @default(PENDING)
  notes    String?
  time     String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pet    Pet?   @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id      String  @id @default(cuid())
  name    String
  species Species
  breed   String?
  age     Int?
  gender  Gender?
  image   String?
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
  Disease     Disease[]
  Vaccination Vaccination[]
  Allergy     Allergy[]
}

model Disease {
  id          String  @id @default(cuid())
  petId       String
  name        String?
  description String?
  image       String?

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vaccination {
  id          String    @id @default(cuid())
  petId       String
  name        String
  date        DateTime
  nextDoseDue DateTime?
  notes       String?

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allergy {
  id              String   @id @default(cuid())
  petId           String
  name            String
  symptoms        String
  recommendations String?
  dateDetected    DateTime

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clinic {
  id           String         @id @default(cuid())
  name         String
  address      String
  city         String
  description  String
  phone        String?
  website      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Appointment  Appointment[]
  User         User[]         @relation()
  Notification Notification[]
}

model Notification {
  id       String  @id @default(cuid())
  userId   String
  senderId String?
  clinicId String?
  message  String
  read     Boolean @default(false)

  user   User    @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  sender User?   @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  clinic Clinic? @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Species {
  CAT
  DOG
  BIRD
  REPTILE
  OTHER
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
  VETERINARIAN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}
